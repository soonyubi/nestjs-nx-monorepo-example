// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  cartItems     CartItem[]
  reviews       Review[]
}

enum UserRole {
  ADMIN
  CUSTOMER
  STAFF
}

model Product {
  id            String    @id @default(uuid())
  name          String
  description   String
  price         Float
  stock         Int
  categories    Category[]
  images        ProductImage[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  stockHistory  StockHistory[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductImage {
  id          String    @id @default(uuid())
  url         String
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model CartItem {
  id          String    @id @default(uuid())
  quantity    Int
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, productId])
}

model Order {
  id            String        @id @default(uuid())
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  totalAmount   Float
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
  payment       Payment?
  address       Address?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id          String    @id @default(uuid())
  quantity    Int
  price       Float
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  createdAt   DateTime  @default(now())
}

model Payment {
  id            String        @id @default(uuid())
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Address {
  id          String    @id @default(uuid())
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  orderId     String    @unique
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id          String    @id @default(uuid())
  rating      Int
  comment     String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, productId])
}

enum StockUpdateReason {
  PURCHASE
  SALE
  RETURN
  DAMAGE
  INVENTORY_ADJUSTMENT
  INITIAL_STOCK
}

model StockHistory {
  id            String           @id @default(uuid())
  productId     String
  product       Product          @relation(fields: [productId], references: [id])
  quantity      Int
  actionType    String           // 'add' 또는 'subtract'
  reason        StockUpdateReason
  reference     String?          // 주문 ID, 반품 ID 등
  previousStock Int
  newStock      Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}